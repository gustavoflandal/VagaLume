# Script para testar a API VagaLume
Write-Host "üß™ Testando API VagaLume" -ForegroundColor Cyan
Write-Host "========================`n" -ForegroundColor Cyan

# 1. Testar rota raiz
Write-Host "1Ô∏è‚É£ Testando rota raiz (GET /)..." -ForegroundColor Yellow
try {
    $root = Invoke-RestMethod -Uri 'http://localhost:3001/' -Method GET
    Write-Host "‚úÖ Rota raiz OK" -ForegroundColor Green
    Write-Host "   Vers√£o: $($root.version)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erro na rota raiz: $_" -ForegroundColor Red
    exit 1
}

# 2. Testar login
Write-Host "`n2Ô∏è‚É£ Testando login (POST /api/auth/login)..." -ForegroundColor Yellow
try {
    $loginBody = @{
        email = 'demo@vagalume.com.br'
        password = 'Demo@2025'
    } | ConvertTo-Json

    $loginResponse = Invoke-RestMethod -Uri 'http://localhost:3001/api/auth/login' -Method POST -Body $loginBody -ContentType 'application/json'
    $token = $loginResponse.data.tokens.accessToken
    Write-Host "‚úÖ Login bem-sucedido!" -ForegroundColor Green
    Write-Host "   Usu√°rio: $($loginResponse.data.user.name)" -ForegroundColor Gray
    Write-Host "   Email: $($loginResponse.data.user.email)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erro no login: $_" -ForegroundColor Red
    exit 1
}

# 3. Testar perfil do usu√°rio
Write-Host "`n3Ô∏è‚É£ Testando perfil (GET /api/users/me)..." -ForegroundColor Yellow
try {
    $headers = @{
        Authorization = "Bearer $token"
    }
    $profile = Invoke-RestMethod -Uri 'http://localhost:3001/api/users/me' -Method GET -Headers $headers
    Write-Host "‚úÖ Perfil obtido com sucesso!" -ForegroundColor Green
    Write-Host "   Nome: $($profile.data.name)" -ForegroundColor Gray
    Write-Host "   Email: $($profile.data.email)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erro ao obter perfil: $_" -ForegroundColor Red
}

# 4. Testar listagem de contas
Write-Host "`n4Ô∏è‚É£ Testando contas (GET /api/accounts)..." -ForegroundColor Yellow
try {
    $accounts = Invoke-RestMethod -Uri 'http://localhost:3001/api/accounts' -Method GET -Headers $headers
    Write-Host "‚úÖ Contas obtidas com sucesso!" -ForegroundColor Green
    Write-Host "   Total de contas: $($accounts.data.Count)" -ForegroundColor Gray
    foreach ($account in $accounts.data) {
        Write-Host "   - $($account.name): R$ $($account.balance)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Erro ao obter contas: $_" -ForegroundColor Red
}

# 5. Testar listagem de categorias
Write-Host "`n5Ô∏è‚É£ Testando categorias (GET /api/categories)..." -ForegroundColor Yellow
try {
    $categories = Invoke-RestMethod -Uri 'http://localhost:3001/api/categories' -Method GET -Headers $headers
    Write-Host "‚úÖ Categorias obtidas com sucesso!" -ForegroundColor Green
    Write-Host "   Total de categorias: $($categories.data.Count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erro ao obter categorias: $_" -ForegroundColor Red
}

# 6. Testar listagem de transa√ß√µes
Write-Host "`n6Ô∏è‚É£ Testando transa√ß√µes (GET /api/transactions)..." -ForegroundColor Yellow
try {
    $transactions = Invoke-RestMethod -Uri 'http://localhost:3001/api/transactions' -Method GET -Headers $headers
    Write-Host "‚úÖ Transa√ß√µes obtidas com sucesso!" -ForegroundColor Green
    Write-Host "   Total de transa√ß√µes: $($transactions.data.transactions.Count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erro ao obter transa√ß√µes: $_" -ForegroundColor Red
}

# 7. Testar cria√ß√£o de nova conta
Write-Host "`n7Ô∏è‚É£ Testando cria√ß√£o de conta (POST /api/accounts)..." -ForegroundColor Yellow
try {
    $newAccountBody = @{
        name = 'Conta Teste'
        type = 'SAVINGS'
        balance = 1000
        currency = 'BRL'
    } | ConvertTo-Json

    $newAccount = Invoke-RestMethod -Uri 'http://localhost:3001/api/accounts' -Method POST -Body $newAccountBody -ContentType 'application/json' -Headers $headers
    Write-Host "‚úÖ Conta criada com sucesso!" -ForegroundColor Green
    Write-Host "   ID: $($newAccount.data.id)" -ForegroundColor Gray
    Write-Host "   Nome: $($newAccount.data.name)" -ForegroundColor Gray
    Write-Host "   Saldo: R$ $($newAccount.data.balance)" -ForegroundColor Gray
    $testAccountId = $newAccount.data.id
} catch {
    Write-Host "‚ùå Erro ao criar conta: $_" -ForegroundColor Red
}

# 8. Testar atualiza√ß√£o de conta
if ($testAccountId) {
    Write-Host "`n8Ô∏è‚É£ Testando atualiza√ß√£o de conta (PUT /api/accounts/$testAccountId)..." -ForegroundColor Yellow
    try {
        $updateAccountBody = @{
            name = 'Conta Teste Atualizada'
        } | ConvertTo-Json

        $updatedAccount = Invoke-RestMethod -Uri "http://localhost:3001/api/accounts/$testAccountId" -Method PUT -Body $updateAccountBody -ContentType 'application/json' -Headers $headers
        Write-Host "‚úÖ Conta atualizada com sucesso!" -ForegroundColor Green
        Write-Host "   Novo nome: $($updatedAccount.data.name)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Erro ao atualizar conta: $_" -ForegroundColor Red
    }

    # 9. Testar exclus√£o de conta
    Write-Host "`n9Ô∏è‚É£ Testando exclus√£o de conta (DELETE /api/accounts/$testAccountId)..." -ForegroundColor Yellow
    try {
        Invoke-RestMethod -Uri "http://localhost:3001/api/accounts/$testAccountId" -Method DELETE -Headers $headers
        Write-Host "‚úÖ Conta exclu√≠da com sucesso!" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erro ao excluir conta: $_" -ForegroundColor Red
    }
}

Write-Host "`nüéâ Testes conclu√≠dos!" -ForegroundColor Cyan
Write-Host "========================`n" -ForegroundColor Cyan
